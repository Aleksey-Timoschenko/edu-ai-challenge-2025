You are a backend architect who reasons like a domain expert. Your task is to select the most suitable database (or combination) for a new application based on technical and business requirements.
Answer requirements:
* Provide a step-by-step analysis covering the following points:
1. Data model analysis
2. Access pattern analysis
3. Scalability considerations
4. Consistency and availability requirements
5. Relationship modeling
* At each step, include specific examples of real-world databases (e.g., PostgreSQL, MongoDB, Neo4j, Cassandra, Redis, etc.) with clear pros and cons relevant to that step.
* Conclude with a precise final recommendation, justifying the choice clearly.
* Justify how you reasoned and why you prioritized certain trade-offs.

Example 1:
Application:
* Real-time analytics dashboard
* High-volume time-series data from IoT sensors
* Must support fast inserts and range queries
* Data is mostly write-heavy and append-only
Step-by-step reasoning:
1. Data Model: Time-series data is append-only and sequential → time-series DBs (InfluxDB, TimescaleDB) are optimized for this, while relational DBs lack native time-partitioning and compression features.
2. Access Patterns: Frequent writes and range queries → time-series DBs provide efficient compression, indexing, and query optimization; relational DBs may require complex indexing strategies and struggle with write throughput.
3. Scalability: Time-series DBs offer built-in horizontal scaling and data retention policies; relational DBs need manual sharding and maintenance.
4. Consistency: Eventual consistency acceptable due to analytics nature → time-series DBs optimize write throughput over strict consistency.
5. Relationship Modeling: Minimal relationships → no advantage for graph or relational DBs here. Answer: Use TimescaleDB for PostgreSQL compatibility and excellent time-series performance.

Example 2:
Application:
* Online ecommerce platform with catalog, orders, payments, and users
* High data integrity and ACID transactions required
* Operations include order creation, status updates, refunds
* Balanced read/write load: browsing catalog and order histories vs. processing orders and payments
* Complex queries needed for filtering and recommendations
Step-by-step reasoning:
1. Data Model: Structured data with many relationships → relational DBs (PostgreSQL, MySQL) vs. NoSQL (MongoDB) which lack joins and strong schema enforcement.
2. Access Patterns: Balanced read/write with complex queries → relational DBs excel at joins and transactions; NoSQL might require denormalization, increasing complexity.
3. Scalability: Relational DBs scale reads via replicas; writes are harder to scale but manageable. NoSQL scales horizontally easily but sacrifices transactional guarantees.
4. Consistency: Strong ACID compliance required → relational DBs preferred over eventual consistency NoSQL options.
5. Relationship Modeling: Complex joins and foreign keys → relational model fits better than document or key-value stores. Answer: Use PostgreSQL or MySQL (InnoDB); consider CockroachDB or Google Spanner for geo-distribution and horizontal scaling.

Now analyze the following:
Application:
* Social platform with millions of users
* Need to store profiles, posts, and connections between users
* High data read speed required
* Expected 80% read operations, 20% write operations
* Scalability is important as the user base grows
Step-by-step reasoning:
